#!/usr/bin/python
import socket
import socket
from struct import *
import commands
import random
import urlparse
import time


CSEQ_NUM = 0
SSEQ_NUM = 0
CACK_NUM = 0
SACK_NUM = 0

MSS = 1400

# ACK_NUM



DATA_RCVD = {}
USER_DATA = ''
LAST_RCVD_TIME = {}
SEND_TIME ={}
CWD = 1

random.seed()

SRC_PORT = random.randint(30000, 60000)   # source port

def decodeIpHeader(packet):
    mapRet = {}
    mapRet["version"] = (int(ord(packet[0])) & 0xF0)>>4
    mapRet["headerLen"] = (int(ord(packet[0])) & 0x0F)<<2
    mapRet["serviceType"] = hex(int(ord(packet[1])))
    mapRet["totalLen"] = (int(ord(packet[2])<<8))+(int(ord(packet[3])))
    mapRet["identification"] = (int( ord(packet[4])>>8 )) + (int( ord(packet[5])))
    mapRet["id"] = int(ord(packet[6]) & 0xE0)>>5
    mapRet["fragOff"] = int(ord(packet[6]) & 0x1F)<<8 + int(ord(packet[7]))
    mapRet["ttl"] = int(ord(packet[8]))
    mapRet["protocol"] = int(ord(packet[9]))
    mapRet["checkSum"] = int(ord(packet[10])<<8)+int(ord(packet[11]))
    mapRet["srcaddr"] = "%d.%d.%d.%d" % (int(ord(packet[12])),int(ord(packet[13])),int(ord(packet[14])), int(ord(packet[15])))
    mapRet["dstaddr"] = "%d.%d.%d.%d" % (int(ord(packet[16])),int(ord(packet[17])),int(ord(packet[18])), int(ord(packet[19])))
    return mapRet


def decode_tcp_header(packet, mapRet):
    mapRet['src_port'] = (int(ord(packet[0])<<8)) + (int(ord(packet[1])))
    mapRet['dst_port'] = (int(ord(packet[2])<<8)) + (int(ord(packet[3])))
    mapRet['seq_num'] = (long(ord(packet[4])<<24)) + (long(ord(packet[5])<<16))
    mapRet['seq_num'] = mapRet.get('seq_num') + (long(ord(packet[6])<<8)) + (long(ord(packet[7])))
    mapRet['ack_num'] = (long(ord(packet[8])<<24)) + (long(ord(packet[9])<<16))
    mapRet['ack_num'] = mapRet.get('ack_num') + (long(ord(packet[10])<<8)) + (long(ord(packet[11])))
    # mapRet['ack'] = mapRet.get('ack_num') - SEQ_NUM
    mapRet['data_offset'] = (int(ord(packet[12])<<4))
    mapRet['ns'] = (int(ord(packet[12]) & int('00000001', 2)))
    mapRet['cwr'] = (int(ord(packet[13]) & int('10000000', 2)))>>7
    mapRet['ece'] = (int(ord(packet[13]) & int('01000000', 2)))>>6
    mapRet['urg'] = (int(ord(packet[13]) & int('00100000', 2)))>>5
    mapRet['ack'] = (int(ord(packet[13]) & int('00010000', 2)))>>4
    mapRet['psh'] = (int(ord(packet[13]) & int('00001000', 2)))>>3
    mapRet['rst'] = (int(ord(packet[13]) & int('00000100', 2)))>>2
    mapRet['syn'] = (int(ord(packet[13]) & int('00000010', 2)))>>1
    mapRet['fin'] = (int(ord(packet[13]) & int('00000001', 2)))
    mapRet['window_size'] = (int(ord(packet[14])<<8)) + (int(ord(packet[15])))
    mapRet['checksum'] = (int(ord(packet[16])<<8)) + (int(ord(packet[17])))
    mapRet['urg_pointer'] = (int(ord(packet[18])<<8)) + (int(ord(packet[19])))
    return mapRet


# checksum functions needed for calculation checksum
def checksum(msg):
    s = 0
    # loop taking 2 characters at a time
    # print len(msg)
    for i in range(0, len(msg), 2):
        # print i
        w = ord(msg[i]) + (ord(msg[i+1]) << 8 )
        s = s + w
    s = (s>>16) + (s & 0xffff);
    s = s + (s >> 16);
    #complement and mask to 4 byte short
    s = ~s & 0xffff
    return s




def get_local_ip_addr():
    ips = commands.getoutput("/sbin/ifconfig | grep -i \"inet\" | grep -iv \"inet6\" | " +
                         "awk {'print $2'} | sed -ne 's/addr\:/ /p'")
    for ip in ips.split():
        if ip[:3] != '127':
            source_ip = ip
            return ip
    self.source_ip = ''

def construct_ip_header(source_ip, dest_ip):
    ip_ihl = 5
    ip_ver = 4
    ip_tos = 0
    ip_tot_len = 0  # kernel will fill the correct total length
    ip_id = 54321   #Id of this packet
    ip_frag_off = 0
    ip_ttl = 255
    ip_proto = socket.IPPROTO_TCP
    ip_check = 0    # kernel will fill the correct checksum
    ip_saddr = socket.inet_aton ( source_ip )   #Spoof the source ip address if you want to
    ip_daddr = socket.inet_aton ( dest_ip )
     
    ip_ihl_ver = (ip_ver << 4) + ip_ihl
    # the ! in the pack format string means network order
    ip_header = pack('!BBHHHBBH4s4s' , ip_ihl_ver, ip_tos, ip_tot_len, ip_id, ip_frag_off, ip_ttl, ip_proto, ip_check, ip_saddr, ip_daddr)
    return ip_header


def construct_packet(source_ip, dest_ip, user_data, seq, ack, ptype, withfin = 0):
    global CSEQ_NUM
    global SSEQ_NUM
    print ptype,
    print seq,
    print ack
    ip_header = construct_ip_header(source_ip, dest_ip)
    # tcp header fields
    tcp_urg = 0
    tcp_rst = 0
    tcp_doff = 5    #4 bit field, size of tcp header, 5 * 4 = 20 bytes
    tcp_dest = 80   # destination port
    if ptype == 'syn':
        tcp_seq = seq
        CSEQ_NUM = tcp_seq
        print 'cseq: ' + str(CSEQ_NUM)
        tcp_ack_seq = ack
        tcp_doff = 5    #4 bit field, size of tcp header, 5 * 4 = 20 bytes
        #tcp flags
        tcp_fin = 0
        tcp_syn = 1
        tcp_psh = 0
        tcp_ack = 0

    elif ptype == 'ack_syn':
        print 'ack with seq: ' + str(seq) + " " + str(ack)
        tcp_seq = seq + 1
        CSEQ_NUM = tcp_seq
        tcp_ack_seq = ack + 1
        SSEQ_NUM = tcp_ack_seq
        #tcp flags
        tcp_fin = 0
        tcp_syn = 0
        tcp_psh = 0
        tcp_ack = 1
    elif ptype == 'ack':
        print 'ack with seq: ' + str(seq) + " " + str(ack)
        tcp_seq = seq
        tcp_ack_seq = ack
        SSEQ_NUM = tcp_ack_seq
        #tcp flags
        tcp_fin = 0
        tcp_syn = 0
        tcp_psh = 0
        tcp_ack = 1
    elif ptype == 'send':
        print 'ack with seq: ' + str(seq) + " " + str(ack)
        tcp_seq = seq
        tcp_ack_seq = ack 
        #tcp flags
        tcp_fin = 0
        tcp_syn = 0
        tcp_psh = 1
        tcp_ack = 1
    elif ptype == 'fin':
        print 'ack with seq: ' + str(seq) + " " + str(ack)
        tcp_seq = seq
        tcp_ack_seq = ack 
        #tcp flags
        tcp_fin = 1
        tcp_syn = 0
        tcp_psh = 0
        tcp_ack = 1
    if withfin == 1:
        tcp_fin = 1
    tcp_window = socket.htons(15)    #   maximum allowed window size
    tcp_check = 0
    tcp_urg_ptr = 0
     
    tcp_offset_res = (tcp_doff << 4) + 0
    tcp_flags = tcp_fin + (tcp_syn << 1) + (tcp_rst << 2) + (tcp_psh <<3) + (tcp_ack << 4) + (tcp_urg << 5)
    # the ! in the pack format string means network order
    tcp_header = pack('!HHLLBBHHH', SRC_PORT, tcp_dest, tcp_seq, tcp_ack_seq, tcp_offset_res, tcp_flags,  tcp_window, tcp_check, tcp_urg_ptr)
    source_address = socket.inet_aton( source_ip )
    dest_address = socket.inet_aton(dest_ip)
    placeholder = 0
    protocol = socket.IPPROTO_TCP
    tcp_length = len(tcp_header) + len(user_data)
    psh = pack('!4s4sBBH', source_address, dest_address , placeholder , protocol , tcp_length)
    psh = psh + tcp_header + user_data;
    # print psh
    if len(psh) % 2 != 0:
        psh = psh + ' '
    tcp_check = checksum(psh)
    #print tcp_checksum
    # make the tcp header again and fill the correct checksum - remember checksum is NOT in network byte order
    tcp_header = pack('!HHLLBBH' , SRC_PORT, tcp_dest, tcp_seq, tcp_ack_seq, tcp_offset_res, tcp_flags,  tcp_window) + pack('H' , tcp_check) + pack('!H' , tcp_urg_ptr)
    packet = ip_header + tcp_header + user_data
    CSEQ_NUM += len(user_data)
    return packet


# def send_packet(source_ip, dest_ip, packet):
#     try:
#         s = socket.socket(socket.AF_INET, socket.SOCK_RAW, socket.IPPROTO_RAW)
#     except socket.error, msg:
#         print 'Socket could not be created. Error Code : ' + str(msg[0]) + ' Message ' + msg[1]
#         sys.exit()
#     s.sendto(packet, (dest_ip, 0))

def hand_shake(source_ip, dest_ip):
    global SSEQ_NUM
    try:
        s = socket.socket(socket.AF_INET, socket.SOCK_RAW, socket.IPPROTO_RAW)
    except socket.error, msg:
        print 'Socket could not be created. Error Code : ' + str(msg[0]) + ' Message ' + msg[1]
        sys.exit()
    packet = construct_packet(source_ip, dest_ip, '', random.randint(0, 65536), 0, 'syn')
    s.sendto(packet, (dest_ip , 0))    # put this in a loop if you want to flood the target 
    # send_packet(source_ip, dest_ip, packet)
    response = recive_packets(source_ip, dest_ip)
    if (response.has_key('syn') and response.get('syn') == 1 and 
        response.has_key('ack') and response.get('ack') == 1):
        SSEQ_NUM = response.get('seq_num')
        print 'acking with CSEQ: ' + str(CSEQ_NUM)
        packet = construct_packet(source_ip, dest_ip, '', CSEQ_NUM, SSEQ_NUM, 'ack_syn')
        s.sendto(packet, (dest_ip , 0))    # put this in a loop if you want to flood the target
        # send_packet(source_ip, dest_ip, packet)
        # response = recive_packets(source_ip, dest_ip)
    return True

def get_user_data():
    global USER_DATA
    res = ''
    if len(USER_DATA) > MSS:
        res = USER_DATA[:MSS]
        USER_DATA = USER_DATA[MSS:]
    else:
        res = USER_DATA + ''
        USER_DATA = ''
    return res

def send_to_dest(url, source_ip, dest_ip, user_data):
    global CSEQ_NUM
    global SSEQ_NUM
    global CWD
    if hand_shake(source_ip, dest_ip):
        print 'finished hand_shake'
        try:
            s = socket.socket(socket.AF_INET, socket.SOCK_RAW, socket.IPPROTO_RAW)
        except socket.error, msg:
            print 'Socket could not be created. Error Code : ' + str(msg[0]) + ' Message ' + msg[1]
            sys.exit()     
        # final full packet - syn packets dont have any data
        get_http_header(url)
        data = get_user_data()
        packet = construct_packet(source_ip, dest_ip, data, CSEQ_NUM, SSEQ_NUM, 'send')
        s.sendto(packet, (dest_ip, 0))
        # send_packet(source_ip, dest_ip, packet)
        response = recive_packets(source_ip, dest_ip)
        while (response.get('srcaddr') == dest_ip 
            and response.get('dstaddr') == source_ip):
            print 'Right addr pair: '
            if response.get('ack') == 1 and response.get('psh') == 1:
                CWD += 1
                if len(response.get('data')) > 0:
                    print 'pushing to buffer and ack: ',
                    print len(USER_DATA),
                    print 'USER_DATA: ' + USER_DATA
                    if response.get('seq_num') not in DATA_RCVD.keys():
                        DATA_RCVD[response.get('seq_num')] = response.get('data')
                    update_ack()
                    # SSEQ_NUM += len(response.get('data'))
                    print 'preparing ack: '
                    data = get_user_data()
                    if len(data) > 0:
                        print 'with data: !!!!!!!!!!!! = ' + data
                    if response.get('fin') != 1:
                        packet = construct_packet(source_ip, dest_ip, data, response.get('ack_num'), SSEQ_NUM, 'ack')
                    else:
                        packet = construct_packet(source_ip, dest_ip, data, response.get('ack_num'), SSEQ_NUM, 'ack', withfin = 1)
                    # try:
                    #     s = socket.socket(socket.AF_INET, socket.SOCK_RAW, socket.IPPROTO_RAW)
                    # except socket.error, msg:
                    #     print 'Socket could not be created. Error Code : ' + str(msg[0]) + ' Message ' + msg[1]
                    #     sys.exit() 
                    # s.sendto(packet, (dest_ip, 0))
                    # # send_packet(source_ip, dest_ip, packet)
                    # response = recive_packets(source_ip, dest_ip)
            elif response.get('ack') == 1 and response.get('fin') != 1:
                print 'just ack'
                SSEQ_NUM = response.get('seq_num')
            elif len(USER_DATA) > 0:
                send_user_data(source_ip, dest_ip)
            elif response.get('fin') == 1:
                start_tear_down(source_ip, dest_ip, response.get('seq_num'))
                break
            try:
                s = socket.socket(socket.AF_INET, socket.SOCK_RAW, socket.IPPROTO_RAW)
            except socket.error, msg:
                print 'Socket could not be created. Error Code : ' + str(msg[0]) + ' Message ' + msg[1]
                sys.exit() 
            response = recive_packets(source_ip, dest_ip)
        print 'rcvd wrong packet'

def update_ack():
    global CSEQ_NUM
    global SSEQ_NUM
    print 'current seq: ' + str(SSEQ_NUM)
    print ' '.join(map(str, DATA_RCVD.keys()))
    while True:
        if SSEQ_NUM in DATA_RCVD.keys():
            SSEQ_NUM += len(DATA_RCVD.get(SSEQ_NUM))
        else:
            break
    print 'now ack: ' + str(SSEQ_NUM)

def send_user_data(source_ip, dest_ip, receiver_adv_win):
    global CSEQ_NUM
    global SSEQ_NUM
    ws = min([CWD, receiver_adv_win])
    num_sent = 0
    if len(USER_DATA) == 0:
        return
    while True:
        if num_sent < ws and len(USER_DATA) > 0:
            data = get_user_data()
            packet = construct_packet(source_ip, dest_ip, data, CSEQ_NUM, SSEQ_NUM, 'send')
            try:
                s = socket.socket(socket.AF_INET, socket.SOCK_RAW, socket.IPPROTO_RAW)
            except socket.error, msg:
                print 'Socket could not be created. Error Code : ' + str(msg[0]) + ' Message ' + msg[1]
                sys.exit() 
            s.sendto(packet, (dest_ip, 0))
            # send_packet(source_ip, dest_ip, packet)
            num_sent += 1

            

def start_tear_down(source_ip, dest_ip, seq):
    print 'tearing down'
    packet = construct_packet(source_ip, dest_ip,'', CSEQ_NUM, seq+1, 'fin')
    try:
        s = socket.socket(socket.AF_INET, socket.SOCK_RAW, socket.IPPROTO_RAW)
    except socket.error, msg:
        print 'Socket could not be created. Error Code : ' + str(msg[0]) + ' Message ' + msg[1]
        sys.exit() 
    s.sendto(packet, (dest_ip, 0))
    # send_packet(source_ip, dest_ip, packet)

def recive_packets(source_ip, dest_ip):
    while True:
        try:
            recv_sockraw = socket.socket(socket.AF_INET, socket.SOCK_RAW, socket.IPPROTO_TCP)
        except socket.error , msg:
            print 'Socket could not be created. Error Code : ' + str(msg[0]) + ' Message ' + msg[1]
            sys.exit()
        received_packet = recv_sockraw.recvfrom(65536)
       
        #packet string from tuple
        received_packet = received_packet[0]
        ip_header = received_packet[0:20]
        tcp_header = received_packet[20:40]
        #now unpack them
        iph = unpack('!BBHHHBBH4s4s' , ip_header)
        if len(iph) > 0:
            # print iph
            mapIpTmp = decodeIpHeader(ip_header)
            mapIpTmp = decode_tcp_header(tcp_header, mapIpTmp)
            mapIpTmp['data'] = received_packet[40:]
            # for k,v in mapIpTmp.items():
            #     print k,"\t:\t",v
            # print '******************************************'
            # print str(mapIpTmp.get('dst_port')) + str(mapIpTmp.get('dst_port') == src_port)
            # print str(mapIpTmp.get('srcaddr')) + str(mapIpTmp.get('src_port') == dest_ip) + dest_ip
            # print str(mapIpTmp.get('dstaddr')) + str(mapIpTmp.get('dstaddr') == source_ip)
            if (mapIpTmp.has_key('dst_port') and mapIpTmp.get('dst_port') == SRC_PORT
                and mapIpTmp.has_key('srcaddr') and mapIpTmp.get('srcaddr') == dest_ip
                and mapIpTmp.has_key('dstaddr') and mapIpTmp.get('dstaddr') == source_ip):
                return mapIpTmp



def get_http_header(url):
    global USER_DATA
        # user_data = 'Hello, how are you'
    # user_data = 'GET / HTTP/1.1\n'
    # user_data += 'Host: david.choffnes.com\n'
    # # user_data += 'Connection: keep-alive\n'
    # user_data += 'Cache-Control: max-age=0\n'
    # user_data += 'Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8\n'
    # # user_data += 'User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_10_3) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/42.0.2311.50 Safari/537.36\n'
    # user_data += 'Accept-Encoding: gzip, deflate, sdch\n'
    # user_data += 'Accept-Language: zh-CN,zh;q=0.8,en-US;q=0.6,en;q=0.4,zh-TW;q=0.2\n'
    # # user_data += 'Cookie: __utmt=1; __utma=135809699.1247664866.1423368106.1425909828.1427059822.11; __utmb=135809699.4.10.1427059822; __utmc=135809699; __utmz=135809699.1423368106.1.1.utmcsr=(direct)|utmccn=(direct)|utmcmd=(none)\n'
    # user_data += '\n'
    # user_data += '\n'
    url = urlparse.urlparse(url)
        # print url
    path = url.path
    if path == "":
        path = "/"
    HOST = url.netloc  # The remote host
    header = 'GET %s HTTP/1.1\r\n' % (path)
    header += 'Connection: keep-alive\r\n'
    header += 'Host: %s\n' % (url.hostname)
    header += 'Cache-Control: max-age=0\r\n'
    header += 'Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8\r\n'
    header += 'Accept-Encoding: gzip, deflate, sdch\n'
    header += 'Accept-Language: zh-CN,zh;q=0.8,en-US;q=0.6,en;q=0.4,zh-TW;q=0.2\r\n'
    header += "\r\n"

    # user_data = ''
    print header
    USER_DATA = header


def main():
    # now start constructing the packet
    packet = ''
    source_ip = get_local_ip_addr()
    if source_ip == '':
        print 'can not get ip_addr'
        exit(1)
    print 'source_ip ' + source_ip
    # dest_ip = '192.168.1.1' # or socket.gethostbyname('www.google.com')
    dest_ip = socket.gethostbyname('david.choffnes.com')
    print 'dest_ip ' + dest_ip
    # url = 'http://david.choffnes.com'
    url = 'http://david.choffnes.com'
    user_data = get_http_header(url)
    send_to_dest(url, source_ip, dest_ip, user_data)
    # recive_packets()
    data = ''
    for k in sorted(DATA_RCVD.keys()):
        data += DATA_RCVD.get(k)
    print data
    url = urlparse.urlparse(url)
    filename = 'index.html'
    if '/' in url.path:
        path = url.path.split('')
        if path[-1] != '':
            filename = path[-1]
    f = open(filename, 'w')
    f.write(data)
    f.close()



if __name__ == '__main__':
    mian()













